
syntax = "proto3";

package SC2APIProtocol;

import "s2clientprotocol/common.proto";

// May not relevant: queueable (everything is queueable).
// May not be important: AbilSetId - marine stim, marauder stim.
// Stuff omitted: transient.
// Stuff that may be important: cost, range, Alignment, targetfilters.
message AbilityData {
  uint32 ability_id = 1;                                 // Stable ID.
  string link_name = 2;                                  // Catalog name of the ability.
  uint32 link_index = 3;                                 // Catalog index of the ability.
  string button_name = 4;                                // Name used for the command card. May not always be set.
  string friendly_name = 5;                              // A human friendly name when the button name or link name isn't descriptive.
  string hotkey = 6;                                     // Hotkey. May not always be set.
  uint32 remaps_to_ability_id = 7;                       // This ability id may be represented by the given more generic id.

  enum Target {
    Target_UNSET = 0;
    None = 1;                                                     // Does not require a target.
    Point = 2;                                                    // Requires a target position.
    Unit = 3;                                                     // Requires a unit to target. Given by position using feature layers.
    PointOrUnit = 4;                                              // Requires either a target point or target unit.
    PointOrNone = 5;                                              // Requires either a target point or no target. (eg. building add-ons)
  }

  bool available = 8;                                    // If true, the ability may be used by this set of mods/map.
  Target target = 9;                                     // Determines if a point is optional or required.
  bool allow_minimap = 10;                               // Can be cast in the minimap.
  bool allow_autocast = 11;                              // Autocast can be set.
  bool is_building = 12;                                 // Requires placement to construct a building.
  float footprint_radius = 13;                           // Estimation of the footprint size. Need a better footprint.
  bool is_instant_placement = 14;                        // Placement next to an existing structure, e.g., an add-on like a Tech Lab.
  float cast_range = 15;                                 // Range unit can cast ability without needing to approach target.

}

enum Attribute {
  Attribute_UNSET = 0;
  Light = 1;
  Armored = 2;
  Biological = 3;
  Mechanical = 4;
  Robotic = 5;
  Psionic = 6;
  Massive = 7;
  Structure = 8;
  Hover = 9;
  Heroic = 10;
  Summoned = 11;
}

message DamageBonus {
  Attribute attribute = 1;
  float bonus = 2;
}

message Weapon {
  enum TargetType {
    TargetType_UNSET = 0;
    Ground = 1;
    Air = 2;
    Any = 3;
  }
  TargetType type = 1;
  float damage = 2;
  repeated DamageBonus damage_bonus = 3;
  uint32 attacks = 4;              // Number of hits per attack. (eg. Colossus has 2 beams)
  float range = 5;
  float speed = 6;                 // Time between attacks.
}

message UnitTypeData {
  uint32 unit_id = 1;                                    // Stable ID.
  string name = 2;                                       // Catalog name of the unit.
  bool available = 3;                                    // If true, the ability may be used by this set of mods/map.
  uint32 cargo_size = 4;                                 // Number of cargo slots it occupies in transports.
  uint32 mineral_cost = 12;
  uint32 vespene_cost = 13;
  float food_required = 14;
  float food_provided = 18;
  uint32 ability_id = 15;                                // This is the ability the builds the unit
  Race race = 16;
  float build_time = 17;
  bool has_vespene = 19;
  bool has_minerals = 20;

  repeated uint32 tech_alias = 21;                                // Units this is equivalent to in terms of satisfying tech requirement.
  uint32 unit_alias = 22;                                // Units that are morphed variants of the same unit.

  uint32 tech_requirement = 23;                          // Structure required to build this unit. (Or any with the same tech_alias)
  bool require_attached = 24;                            // Whether tech_requirement is an add-on.

  // Values include changes from upgrades
  repeated Attribute attributes = 8;
  float movement_speed = 9;
  float armor = 10;
  repeated Weapon weapons = 11;
}

message UpgradeData {
  uint32 upgrade_id = 1;       // Stable ID.
  string name = 2;
  uint32 mineral_cost = 3;
  uint32 vespene_cost = 4;
  float research_time = 5;
  uint32 ability_id = 6;
}

message BuffData {
  uint32 buff_id = 1;          // Stable ID.
  string name = 2;
}
